;; Analyzed by ClojureScript 0.0-2665
{:defs {connect {:protocol-inline nil, :name weasel.repl/connect, :variadic true, :file "out/weasel/repl.cljs", :end-column 15, :method-params ([repl-server-url p__5310]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([repl-server-url & {:keys [verbose on-open on-error on-close print], :or {verbose true, print :repl}}])), :test true}, print-fns {:file "out/weasel/repl.cljs", :line 47, :column 1, :end-line 47, :end-column 16, :test true, :name weasel.repl/print-fns}, console-print {:protocol-inline nil, :name weasel.repl/console-print, :variadic true, :file "out/weasel/repl.cljs", :end-column 21, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& args])), :test true}, repl-print {:protocol-inline nil, :name weasel.repl/repl-print, :variadic true, :file "out/weasel/repl.cljs", :end-column 18, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 0}), :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& args])), :test true}, process-message {:file "out/weasel/repl.cljs", :line 14, :column 1, :end-line 14, :end-column 27, :test true, :name weasel.repl/process-message}, alive? {:protocol-inline nil, :name weasel.repl/alive?, :variadic false, :file "out/weasel/repl.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 0}), :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, ws-connection {:file "out/weasel/repl.cljs", :line 7, :column 1, :end-line 7, :end-column 30, :private true, :test true, :name weasel.repl/ws-connection}}, :name weasel.repl, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {event-types clojure.browser.event, read-string cljs.reader}, :requires {ws weasel.impls.websocket, weasel.impls.websocket weasel.impls.websocket, reader cljs.reader, cljs.reader cljs.reader, net clojure.browser.net, clojure.browser.net clojure.browser.net, clojure.browser.event clojure.browser.event, event clojure.browser.event}, :imports nil}