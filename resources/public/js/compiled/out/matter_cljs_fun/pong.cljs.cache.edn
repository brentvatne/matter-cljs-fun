;; Analyzed by ClojureScript 0.0-2665
{:defs {engine {:file "src/matter_cljs_fun/pong.cljs", :line 49, :column 1, :end-line 49, :end-column 17, :test true, :name matter-cljs-fun.pong/engine}, engine-options {:file "src/matter_cljs_fun/pong.cljs", :line 31, :column 1, :end-line 31, :end-column 21, :test true, :name matter-cljs-fun.pong/engine-options}, user-paddle {:file "src/matter_cljs_fun/pong.cljs", :line 38, :column 1, :end-line 38, :end-column 22, :test true, :name matter-cljs-fun.pong/user-paddle}, add-bodies {:protocol-inline nil, :name matter-cljs-fun.pong/add-bodies, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 18, :method-params ([bodies]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bodies])), :test true}, scene-height {:file "src/matter_cljs_fun/pong.cljs", :line 15, :column 1, :end-line 15, :end-column 19, :test true, :name matter-cljs-fun.pong/scene-height}, build-world {:protocol-inline nil, :name matter-cljs-fun.pong/build-world, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, current-direction {:protocol-inline nil, :name matter-cljs-fun.pong/current-direction, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 25, :method-params ([paddle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/Keyword, :variadic false, :max-fixed-arity 1}), :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([paddle])), :test true}, pos-y {:protocol-inline nil, :name matter-cljs-fun.pong/pos-y, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 13, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, scene-width {:file "src/matter_cljs_fun/pong.cljs", :line 14, :column 1, :end-line 14, :end-column 18, :test true, :name matter-cljs-fun.pong/scene-width}, apply-force {:protocol-inline nil, :name matter-cljs-fun.pong/apply-force, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 19, :method-params ([body strength]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([body strength])), :test true}, rectangle {:protocol-inline nil, :name matter-cljs-fun.pong/rectangle, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, slam-brakes! {:protocol-inline nil, :name matter-cljs-fun.pong/slam-brakes!, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 20, :method-params ([paddle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([paddle])), :test true}, clear-statics {:protocol-inline nil, :name matter-cljs-fun.pong/clear-statics, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 144, :end-line 144, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, clear-paddles {:protocol-inline nil, :name matter-cljs-fun.pong/clear-paddles, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, pos {:protocol-inline nil, :name matter-cljs-fun.pong/pos, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 11, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, pos-x {:protocol-inline nil, :name matter-cljs-fun.pong/pos-x, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 13, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, accept-user-input! {:protocol-inline nil, :name matter-cljs-fun.pong/accept-user-input!, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0}), :line 115, :end-line 115, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, world {:file "src/matter_cljs_fun/pong.cljs", :line 56, :column 1, :end-line 56, :end-column 16, :test true, :name matter-cljs-fun.pong/world}, initialize {:protocol-inline nil, :name matter-cljs-fun.pong/initialize, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 131, :end-line 131, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, cpu-paddle {:file "src/matter_cljs_fun/pong.cljs", :line 41, :column 1, :end-line 41, :end-column 21, :test true, :name matter-cljs-fun.pong/cpu-paddle}, right-wall {:file "src/matter_cljs_fun/pong.cljs", :line 26, :column 1, :end-line 26, :end-column 17, :test true, :name matter-cljs-fun.pong/right-wall}, left-wall {:file "src/matter_cljs_fun/pong.cljs", :line 22, :column 1, :end-line 22, :end-column 16, :test true, :name matter-cljs-fun.pong/left-wall}, abs {:protocol-inline nil, :name matter-cljs-fun.pong/abs, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, move-paddle! {:protocol-inline nil, :name matter-cljs-fun.pong/move-paddle!, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 20, :method-params ([paddle direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([paddle direction])), :test true}, log-user-paddle {:protocol-inline nil, :name matter-cljs-fun.pong/log-user-paddle, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, velocity-x {:protocol-inline nil, :name matter-cljs-fun.pong/velocity-x, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 18, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, brake-force {:protocol-inline nil, :name matter-cljs-fun.pong/brake-force, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 19, :method-params ([paddle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{number clj-nil}, :variadic false, :max-fixed-arity 1}), :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([paddle])), :test true}, translate {:protocol-inline nil, :name matter-cljs-fun.pong/translate, :variadic false, :file "src/matter_cljs_fun/pong.cljs", :end-column 17, :method-params ([body x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 75, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([body x y])), :test true}}, :name matter-cljs-fun.pong, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {World matter-cljs-fun.util, timeout cljs.core.async, <! cljs.core.async, Engine matter-cljs-fun.util, chan cljs.core.async, Composites matter-cljs-fun.util, Matter matter-cljs-fun.util, Bodies matter-cljs-fun.util, on-click matter-cljs-fun.util, Body matter-cljs-fun.util, >! cljs.core.async, events->chan matter-cljs-fun.util, alts! cljs.core.async, keys-chan matter-cljs-fun.util, Composite matter-cljs-fun.util, put! cljs.core.async}, :requires {classes goog.dom.classes, goog.dom.classes goog.dom.classes, fw figwheel.client, figwheel.client figwheel.client, events goog.events, goog.events goog.events, matter-cljs-fun.util matter-cljs-fun.util, cljs.core.async cljs.core.async, async cljs.core.async}, :imports nil}