;; Analyzed by ClojureScript 0.0-2665
{:defs {engine {:file "src/matter_cljs_fun/plinko.cljs", :line 37, :column 1, :end-line 37, :end-column 17, :test true, :name matter-cljs-fun.plinko/engine}, engine-options {:file "src/matter_cljs_fun/plinko.cljs", :line 29, :column 1, :end-line 29, :end-column 21, :test true, :name matter-cljs-fun.plinko/engine-options}, pin-cols {:file "src/matter_cljs_fun/plinko.cljs", :line 13, :column 1, :end-line 13, :end-column 15, :test true, :name matter-cljs-fun.plinko/pin-cols}, scene-height {:file "src/matter_cljs_fun/plinko.cljs", :line 10, :column 1, :end-line 10, :end-column 19, :test true, :name matter-cljs-fun.plinko/scene-height}, right-wall-width {:file "src/matter_cljs_fun/plinko.cljs", :line 23, :column 1, :end-line 23, :end-column 23, :test true, :name matter-cljs-fun.plinko/right-wall-width}, clear-pins {:protocol-inline nil, :name matter-cljs-fun.plinko/clear-pins, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, scene-width {:file "src/matter_cljs_fun/plinko.cljs", :line 9, :column 1, :end-line 9, :end-column 18, :test true, :name matter-cljs-fun.plinko/scene-width}, start-y {:file "src/matter_cljs_fun/plinko.cljs", :line 16, :column 1, :end-line 16, :end-column 14, :test true, :name matter-cljs-fun.plinko/start-y}, create-environment {:protocol-inline nil, :name matter-cljs-fun.plinko/create-environment, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 94, :end-line 94, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, clear-borders {:protocol-inline nil, :name matter-cljs-fun.plinko/clear-borders, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, row-space {:file "src/matter_cljs_fun/plinko.cljs", :line 18, :column 1, :end-line 18, :end-column 16, :test true, :name matter-cljs-fun.plinko/row-space}, left-wall-width {:file "src/matter_cljs_fun/plinko.cljs", :line 22, :column 1, :end-line 22, :end-column 22, :test true, :name matter-cljs-fun.plinko/left-wall-width}, ground {:file "src/matter_cljs_fun/plinko.cljs", :line 67, :column 1, :end-line 67, :end-column 13, :test true, :name matter-cljs-fun.plinko/ground}, create-pin-stack-rows {:protocol-inline nil, :name matter-cljs-fun.plinko/create-pin-stack-rows, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, ball-radius {:file "src/matter_cljs_fun/plinko.cljs", :line 26, :column 1, :end-line 26, :end-column 18, :test true, :name matter-cljs-fun.plinko/ball-radius}, pin-rows {:file "src/matter_cljs_fun/plinko.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :test true, :name matter-cljs-fun.plinko/pin-rows}, pin-radius {:file "src/matter_cljs_fun/plinko.cljs", :line 17, :column 1, :end-line 17, :end-column 17, :test true, :name matter-cljs-fun.plinko/pin-radius}, add-random-ball {:protocol-inline nil, :name matter-cljs-fun.plinko/add-random-ball, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, add-event-listener {:protocol-inline nil, :name matter-cljs-fun.plinko/add-event-listener, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 26, :method-params ([event id fun]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 102, :end-line 102, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event id fun])), :test true}, clear-balls {:protocol-inline nil, :name matter-cljs-fun.plinko/clear-balls, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, start-x {:file "src/matter_cljs_fun/plinko.cljs", :line 15, :column 1, :end-line 15, :end-column 14, :test true, :name matter-cljs-fun.plinko/start-x}, on-click {:file "src/matter_cljs_fun/plinko.cljs", :line 105, :column 1, :end-line 105, :end-column 15, :test true, :name matter-cljs-fun.plinko/on-click}, world {:file "src/matter_cljs_fun/plinko.cljs", :line 42, :column 1, :end-line 42, :end-column 16, :test true, :name matter-cljs-fun.plinko/world}, initialize {:protocol-inline nil, :name matter-cljs-fun.plinko/initialize, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 108, :end-line 108, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, col-space {:file "src/matter_cljs_fun/plinko.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :test true, :name matter-cljs-fun.plinko/col-space}, add-ball {:protocol-inline nil, :name matter-cljs-fun.plinko/add-ball, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, right-wall {:file "src/matter_cljs_fun/plinko.cljs", :line 73, :column 1, :end-line 73, :end-column 17, :test true, :name matter-cljs-fun.plinko/right-wall}, left-wall {:file "src/matter_cljs_fun/plinko.cljs", :line 70, :column 1, :end-line 70, :end-column 16, :test true, :name matter-cljs-fun.plinko/left-wall}, ground-width {:file "src/matter_cljs_fun/plinko.cljs", :line 21, :column 1, :end-line 21, :end-column 19, :test true, :name matter-cljs-fun.plinko/ground-width}, create-pin-stack-offset-rows {:protocol-inline nil, :name matter-cljs-fun.plinko/create-pin-stack-offset-rows, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 36, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, position->pin-grey {:protocol-inline nil, :name matter-cljs-fun.plinko/position->pin-grey, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 26, :method-params ([x y col row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 4}), :line 49, :end-line 49, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y col row])), :test true}, position->pin-black {:protocol-inline nil, :name matter-cljs-fun.plinko/position->pin-black, :variadic false, :file "src/matter_cljs_fun/plinko.cljs", :end-column 27, :method-params ([x y col row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 4}), :line 46, :end-line 46, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y col row])), :test true}}, :name matter-cljs-fun.plinko, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {World matter-cljs-fun.util, Engine matter-cljs-fun.util, Composites matter-cljs-fun.util, Matter matter-cljs-fun.util, Bodies matter-cljs-fun.util, Body matter-cljs-fun.util, Composite matter-cljs-fun.util}, :requires {fw figwheel.client, figwheel.client figwheel.client, matter-cljs-fun.util matter-cljs-fun.util}, :imports nil}