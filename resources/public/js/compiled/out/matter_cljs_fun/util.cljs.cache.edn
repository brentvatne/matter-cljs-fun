;; Analyzed by ClojureScript 0.0-2665
{:defs {World {:file "src/matter_cljs_fun/util.cljs", :line 13, :column 1, :end-line 13, :end-column 12, :test true, :name matter-cljs-fun.util/World}, set-html! {:protocol-inline nil, :name matter-cljs-fun.util/set-html!, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 17, :method-params ([id s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id s])), :doc "Given a CSS id, replace the matching DOM element's\n  content with the supplied string.", :test true}, Engine {:file "src/matter_cljs_fun/util.cljs", :line 11, :column 1, :end-line 11, :end-column 13, :test true, :name matter-cljs-fun.util/Engine}, Constraint {:file "src/matter_cljs_fun/util.cljs", :line 16, :column 1, :end-line 16, :end-column 17, :test true, :name matter-cljs-fun.util/Constraint}, after-tick {:protocol-inline nil, :name matter-cljs-fun.util/after-tick, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 18, :method-params ([engine handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([engine handler])), :test true}, by-id {:protocol-inline nil, :name matter-cljs-fun.util/by-id, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 13, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Short-hand for document.getElementById(id)", :test true}, Events {:file "src/matter_cljs_fun/util.cljs", :line 12, :column 1, :end-line 12, :end-column 13, :test true, :name matter-cljs-fun.util/Events}, Composites {:file "src/matter_cljs_fun/util.cljs", :line 17, :column 1, :end-line 17, :end-column 17, :test true, :name matter-cljs-fun.util/Composites}, add-event-listener {:protocol-inline nil, :name matter-cljs-fun.util/add-event-listener, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 26, :method-params ([event id fun]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event id fun])), :test true}, on-tick {:protocol-inline nil, :name matter-cljs-fun.util/on-tick, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 15, :method-params ([engine handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([engine handler])), :test true}, Matter {:file "src/matter_cljs_fun/util.cljs", :line 10, :column 1, :end-line 10, :end-column 13, :test true, :name matter-cljs-fun.util/Matter}, Bodies {:file "src/matter_cljs_fun/util.cljs", :line 15, :column 1, :end-line 15, :end-column 13, :test true, :name matter-cljs-fun.util/Bodies}, on-click {:doc "Given an id and callback handler it fires the callback when the\n  element with the id is clicked", :file "src/matter_cljs_fun/util.cljs", :line 33, :column 1, :end-line 33, :end-column 15, :test true, :name matter-cljs-fun.util/on-click}, Body {:file "src/matter_cljs_fun/util.cljs", :line 14, :column 1, :end-line 14, :end-column 11, :test true, :name matter-cljs-fun.util/Body}, before-tick {:protocol-inline nil, :name matter-cljs-fun.util/before-tick, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 19, :method-params ([engine handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([engine handler])), :test true}, stringify {:protocol-inline nil, :name matter-cljs-fun.util/stringify, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 17, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :test true}, events->chan {:protocol-inline nil, :name matter-cljs-fun.util/events->chan, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 20, :method-params ([el event-type] [el event-type c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([el event-type] [el event-type c])), :doc "Given a target DOM element and event type return a channel of\n  observed events. Can supply the channel to receive events as third\n  optional argument.", :test true}, keys-chan {:protocol-inline nil, :name matter-cljs-fun.util/keys-chan, :variadic false, :file "src/matter_cljs_fun/util.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return a channel of :left and :right events\n  sourced from left and right arrow key presses.", :test true}, Composite {:file "src/matter_cljs_fun/util.cljs", :line 18, :column 1, :end-line 18, :end-column 16, :test true, :name matter-cljs-fun.util/Composite}}, :name matter-cljs-fun.util, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {<! cljs.core.async, chan cljs.core.async, dropping-buffer cljs.core.async, >! cljs.core.async, alts! cljs.core.async, put! cljs.core.async}, :requires {EventType goog.events.EventType, classes goog.dom.classes, goog.dom.classes goog.dom.classes, fw figwheel.client, figwheel.client figwheel.client, events goog.events, goog.events goog.events, cljs.core.async cljs.core.async, async cljs.core.async}, :imports {EventType goog.events.EventType}}