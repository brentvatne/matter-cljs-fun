;; Analyzed by ClojureScript 0.0-2665
{:defs {NamedError {:num-fields 2, :protocols #{cljs.core/IPrintWithWriter}, :name schema.utils/NamedError, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 21, :type true, :column 10, :line 89, :record false, :end-line 89, :skip-protocol-flag #{cljs.core/IPrintWithWriter}}, error? {:protocol-inline nil, :name schema.utils/error?, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, ->SimpleVCell {:protocol-inline nil, :protocols #{schema.utils/PSimpleCell}, :name schema.utils/->SimpleVCell, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 22, :method-params ([q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag schema.utils/SimpleVCell, :variadic false, :max-fixed-arity 1}), :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([q])), :skip-protocol-flag nil, :test true}, map->ErrorContainer {:protocol-inline nil, :name schema.utils/map->ErrorContainer, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 27, :method-params ([G__23101]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :methods ({:tag schema.utils/ErrorContainer, :variadic false, :max-fixed-arity 1}), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23101])), :test true}, wrap-error-name {:protocol-inline nil, :name schema.utils/wrap-error-name, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 23, :method-params ([name maybe-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil schema.utils/ErrorContainer}, :variadic false, :max-fixed-arity 2}), :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name maybe-error])), :doc "If maybe-error is an error, wrap the inner value in a NamedError; otherwise, return as-is", :test true}, value-name {:protocol-inline nil, :name schema.utils/value-name, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 18, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/Symbol}, :variadic false, :max-fixed-arity 1}), :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Provide a descriptive short name for a value.", :test true}, SimpleVCell {:num-fields 1, :protocols #{schema.utils/PSimpleCell}, :name schema.utils/SimpleVCell, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 22, :type true, :column 10, :line 187, :record false, :end-line 187, :skip-protocol-flag nil}, result-builder {:protocol-inline nil, :name schema.utils/result-builder, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 22, :method-params ([lift-to-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lift-to-error])), :doc "Build up a result by conjing values, producing an error if at least one\n   sub-value returns an error.", :test true}, set_cell {:protocol-inline nil, :protocol schema.utils/PSimpleCell, :name schema.utils/set_cell, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 13, :method-params ([this x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 181, :end-line 183, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this x])), :test true}, get_cell {:protocol-inline nil, :protocol schema.utils/PSimpleCell, :name schema.utils/get_cell, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 181, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, use-fn-validation {:doc "Turn on run-time function validation for functions compiled when\n   *compile-function-validation* was true -- has no effect for functions compiled\n   when it is false.", :file "resources/public/js/compiled/out/schema/utils.cljs", :line 192, :column 1, :end-line 192, :end-column 50, :tag schema.utils.PSimpleCell, :test true, :name schema.utils/use-fn-validation}, ValidationError {:num-fields 4, :protocols #{cljs.core/IPrintWithWriter}, :name schema.utils/ValidationError, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 26, :type true, :column 10, :line 68, :record false, :end-line 68, :skip-protocol-flag #{cljs.core/IPrintWithWriter}}, format* {:protocol-inline nil, :name schema.utils/format*, :variadic true, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 15, :method-params ([fmt args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmt & args])), :test true}, fn-schema-bearer {:protocol-inline nil, :name schema.utils/fn-schema-bearer, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself.", :test true}, ->ValidationError {:protocol-inline nil, :name schema.utils/->ValidationError, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 25, :method-params ([schema value expectation-delay fail-explanation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag schema.utils/ValidationError, :variadic false, :max-fixed-arity 4}), :line 80, :end-line 80, :max-fixed-arity 4, :fn-var true, :arglists (quote ([schema value expectation-delay fail-explanation])), :doc "for cljs sake (easier than normalizing imports in macros.clj)", :test true}, named-error-explain {:protocol-inline nil, :name schema.utils/named-error-explain, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 27, :method-params ([err]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([err])), :test true}, record? {:protocol-inline nil, :name schema.utils/record?, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, ->NamedError {:protocol-inline nil, :name schema.utils/->NamedError, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 20, :method-params ([name error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag schema.utils/NamedError, :variadic false, :max-fixed-arity 2}), :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name error])), :doc "for cljs sake (easier than normalizing imports in macros.clj)", :test true}, type-of {:protocol-inline nil, :name schema.utils/type-of, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, declare-class-schema! {:protocol-inline nil, :name schema.utils/declare-class-schema!, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 31, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :methods ({:variadic false, :max-fixed-arity 2}), :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema])), :test true}, ErrorContainer {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.utils/ErrorContainer, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 27, :type true, :column 12, :internal-ctor true, :line 110, :record true, :end-line 110, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, PSimpleCell {:protocol-symbol true, :name schema.utils/PSimpleCell, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 26, :column 1, :line 181, :protocol-info {:methods {get_cell [[this]], set_cell [[this x]]}}, :info nil, :end-line 181, :impls #{schema.utils/SimpleVCell}, :test true}, ->ErrorContainer {:protocol-inline nil, :name schema.utils/->ErrorContainer, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 27, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :methods ({:tag schema.utils/ErrorContainer, :variadic false, :max-fixed-arity 1}), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error])), :test true}, memoize-id {:protocol-inline nil, :name schema.utils/memoize-id, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Identity version of memoize, because many schemas are records, and records\n   don't cache their hash codes (at least in Clojure 1.5.1).\n   Not thread safe, and doesn't cache falsey values.", :test true}, class-schema {:protocol-inline nil, :name schema.utils/class-schema, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 22, :method-params ([klass]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :methods ({:variadic false, :max-fixed-arity 1}), :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([klass])), :test true}, validation-error-explain {:protocol-inline nil, :name schema.utils/validation-error-explain, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 32, :method-params ([err]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([err])), :test true}, error-val {:protocol-inline nil, :name schema.utils/error-val, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, assoc-when {:protocol-inline nil, :name schema.utils/assoc-when, :variadic true, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 18, :method-params ([m kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any cljs.core/MetaFn clj-nil}, :variadic true, :max-fixed-arity 1}), :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m & kvs])), :doc "Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.", :test true}, error {:protocol-inline nil, :name schema.utils/error, :variadic false, :file "resources/public/js/compiled/out/schema/utils.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag schema.utils/ErrorContainer, :variadic false, :max-fixed-arity 1}), :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Distinguish a value (must be non-nil) as an error.", :test true}}, :name schema.utils, :doc "Private utilities used in schema implementation.", :excludes #{record?}, :use-macros nil, :require-macros nil, :uses nil, :requires {gstring goog.string, goog.string goog.string, goog.string.format goog.string.format}, :imports nil}